name: Build and deploy Python app to Azure Web App - AirSight

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  WEBAPP_NAME: AirSight              # <-- your App Service name
  RESOURCE_GROUP: "AirSight_group-ad27"                 # <-- set to your RG name to run the config step

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      # Vendor dependencies into the repo (works with Azure Linux Python images)
      - name: Install dependencies (vendored)
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt -t .python_packages/lib/site-packages

      # Quick sanity checks (edit file names as needed)
      - name: Sanity check
        run: |
          test -f flask_api_backend.py || (echo "flask_api_backend.py missing" && exit 1)
          test -f index.html || (echo "index.html missing" && exit 1)
          python -c "import pkgutil; print('gunicorn OK' if pkgutil.find_loader('gunicorn') else 'gunicorn MISSING')"

      # Package only what we need into a folder to upload as an artifact
      - name: Stage artifact
        run: |
          mkdir -p package
          shopt -s dotglob
          cp -r \
            aqi_prediction_system.py \
            flask_api_backend.py \
            index.html \
            static \
            templates \
            .python_packages \
            package/ 2>/dev/null || true
          # also include any other app files you need:
          rsync -a --exclude 'package' --exclude '.git' --exclude '.github' \
            ./ package/ >/dev/null 2>&1 || true
          echo "Contents of package/:"
          ls -la package | sed -n '1,200p'

      - name: Upload artifact for deployment
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: package

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: python-app
          path: release

      # --- Azure login (using the secrets you showed) ---
      - name: Verify Azure secrets
        shell: bash
        env:
          CID: ${{ secrets.AZUREAPPSERVICE_CLIENTID_32FBB5890BF24D90BABB0420ADE93AAC }}
          TID: ${{ secrets.AZUREAPPSERVICE_TENANTID_E90AD2769AFE4313B72013DAC9E3F102 }}
          SID: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_6EC81AD7847842CAA14260C11B733745 }}
        run: |
          [ -z "$CID" ] && echo "::error::Missing client-id secret" && exit 1 || true
          [ -z "$TID" ] && echo "::error::Missing tenant-id secret" && exit 1 || true
          [ -z "$SID" ] && echo "::error::Missing subscription-id secret" && exit 1 || true

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_32FBB5890BF24D90BABB0420ADE93AAC }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_E90AD2769AFE4313B72013DAC9E3F102 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_6EC81AD7847842CAA14260C11B733745 }}

      # Optional: configure app settings and startup (Linux)
      - name: Configure app settings and startup
        if: env.RESOURCE_GROUP != ''
        uses: azure/cli@v2
        with:
          inlineScript: |
            az webapp config appsettings set -g "${{ env.RESOURCE_GROUP }}" -n "${{ env.WEBAPP_NAME }}" --settings \
              SCM_DO_BUILD_DURING_DEPLOYMENT=0 \
              WEBSITE_RUN_FROM_PACKAGE=1 \
              PYTHONPATH=/home/site/wwwroot/.python_packages/lib/site-packages \
              WEBSITES_PORT=8000
            az webapp config set -g "${{ env.RESOURCE_GROUP }}" -n "${{ env.WEBAPP_NAME }}" \
              --startup-file 'bash -lc "python aqi_prediction_system.py & exec gunicorn --bind 0.0.0.0:${PORT:-8000} flask_api_backend:app"'

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.WEBAPP_NAME }}
          slot-name: ${{ env.SLOT_NAME }}      # remove if not using slots
          package: release
