name: Build & Deploy AirSight to Azure Web App

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: deploy-airsight
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      APP_NAME: AirSight              # <-- EDIT if your App Service name differs
      DEPLOY_PATH: .                  # will be overwritten if we find a build folder

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- Optional: Node build (if package.json present) ----------
      - name: Detect Node project
        id: detect_node
        shell: bash
        run: |
          if [ -f "package.json" ]; then
            echo "has_node=true" >> $GITHUB_OUTPUT
          else
            echo "has_node=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node
        if: steps.detect_node.outputs.has_node == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install & Build (Node)
        if: steps.detect_node.outputs.has_node == 'true'
        run: |
          npm ci
          # If your app needs an explicit build, keep the next line.
          # If it's a server-only Node app, this will just no-op if there's no script.
          npm run build --if-present

      # ---------- Decide what to deploy ----------
      - name: Choose deploy path
        id: choose_path
        shell: bash
        run: |
          # Priority: common frontend build folders, then repo root
          for d in build dist out .next nextjs .output public; do
            if [ -d "$d" ]; then
              echo "Found build folder: $d"
              echo "DEPLOY_PATH=$d" >> $GITHUB_ENV
              break
            fi
          done
          echo "Deploying from: ${DEPLOY_PATH}"
          echo "Contents:"
          ls -la "${DEPLOY_PATH}"

      # ---------- Azure Login (using your existing long secret names) ----------
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_32FBB5890BF24D90BABB0420ADE93AAC }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_E90AD2769AFE4313B72013DAC9E3F102 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_6EC81AD7847842CAA14260C11B733745 }}

      # ---------- Deploy ----------
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.APP_NAME }}
          slot-name: ${{ env.SLOT_NAME }}
          package: ${{ env.DEPLOY_PATH }}
